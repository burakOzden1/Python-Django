"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-mk6@qgn_vcl-!1hlno)1p_7q*3*1kzdzf^4m3**_(v@mj0e012"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# debug ayari True yapilirsa debugger yani sorun cozucu kisi hatalari gorur,
# guvenlik acigi olmamasi icin bu ayar False iken site yayina alinmalidir.

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    # Buradaki bilgiler disinda bir bilgi girilmek istenirse
]


# Application definition

BASE_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = []

MY_APPS = [
    "todo",
]

INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + MY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.project_context_processors.global_category_context",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static_files",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Yapilan Islemler:
# Django ORM Query -> all, filter, explude, create, get incelendi
# Django ORM ile veriler guncellendi (update)
# Instance icindeki bilgiler degistirildi ve kaydedildi (save)
# Static dosya yapisi olusturuldu
# makemigrations ve migrate kavramlari incelendi
# settings icerisindeki APP yapilari ayrildi

# PATRON CILDIRDI :)
# DONE: Todo'nun kategorisi olsun? (tek kategori ise foreign key )
# DONE: Kategori icindeki Tasklar Neler?
# DONE: Todo ekleyen kisi kim? (foreign key)
# DONE: Todo'yu ekleyen kisi sadece kendi TODO itemlarini gorebilsin
# DONE: Todo'ya tag ekleyelim, birden fazla tag eklenebilir olsun (ManyToMany)
# DONE: Tag'a Ait Todo'lar Neler?


# Tekrar
# DONE: admin panele giris yapilarak Todo yapisi eklendi ve oradaki goruntu ayarlari yapildi.
# DONE: admin panelde title, ve is_active gibi bilgilerin goruntulenmesi saglandi
# DONE: admin panel uzerinde todolarin eklenme tarihinin ve update edilme tarihinin bilgisi gosterildi. settings.py icerisindeki DEBUG ve ALLOWED_HOSTS ayarlari uzerinde duruldu.
# DONE: todo/views.py icerisine todo_list.html eklendi, config/urls.py icerisinden cagirildi. Base.html yapisi olusturuldu, settings.py icerisinden statik dosyalar cagirildi.
# DONE: footer.html, navbar.html ve base.html yapilari olusturuldu. Bazi duzenlemeler yapildi.
# DONE: todolarin views.py icerisinde filtrelenerek todo_list.html uzerinde gosterilmesi uzerine bir takim denemeler yapildi.
# DONE: django shell ile bir takim islemler yapildi. objects.all() diyerek cagirdigimiz nesnelerin varsayilanlik ayarlari yapildi.
# DONE: todo_list.html ve todo_detail.html sayfalari olusturudu. (views.py ve urls.py dosyalarini iyi incele)
# DONE: todo-detail.html sayfasi ile ilgili bazi duzenlemeler yapildi ve 404 hatalari eklendi.
# DONE: get_object_or_404 ve todolara link ozelligi ekleme islemi.
# DONE: auto_slug paketi eklendi ve Category modeli olusturuldu.
# DONE: foreignKey ile Category nin admin panele eklenmesi ve orada gosterilmesi.
# DONE: context_processor ile kategori bilgilerini ekranda gorme ve todo_detail sayfasinda todo larimizin eklenme tarihlerinin gosterilmesi
# DONE: todo_detail.html sayfasina card yapisinin eklenerek daha düzenli sekilde gosterilmesi
# DONE: kategoriler icerisindeki todolarin gosterilmesi uzerine bir takim islemler yapildi.
# DONE: kategorilerin gosterilmesi islemi get_absolute_url fonksiyonu ile yapildi
# DONE: todolara tiklandigi zaman urlde kategorinin altinda seklinde gorulmesi
# DONE: breadcrumb eklenmesi
# DONE: todo icerisine user eklenmesi
# DONE: login islemi eklendi
# DONE: logout islemi ve oturumu kapatma
# DONE: manyToManyField ile tag yapisinin olusturulmasi
# DONE: tag yapilarina tiklanabilirlik ozelligi eklendi ve ters yönde calisir hale getirildi.
# DONE:
# DONE:
# DONE:
# DONE:
# DONE:
# DONE:
# DONE:
# DONE:
